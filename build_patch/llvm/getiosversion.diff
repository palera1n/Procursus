--- a/llvm/lib/Support/Triple.cpp	2023-11-14 08:32:21
+++ b/llvm/lib/Support/Triple.cpp	2024-01-05 23:43:40
@@ -1252,9 +1252,65 @@
 }
 
 VersionTuple Triple::getiOSVersion() const {
+  VersionTuple TheTuple = getOSVersion();
+  Optional<unsigned> OptionalMajor = TheTuple.getMajor(),
+    OptionalMinor = TheTuple.getMinor(),
+    OptionalSubminor = TheTuple.getSubminor(),
+    OptionalBuild = TheTuple.getBuild();
+
+  unsigned Major = OptionalMajor.has_value() ? OptionalMajor.value() : 0;
+  unsigned Minor = OptionalMinor.has_value() ? OptionalMinor.value() : 0;
+  unsigned Subminor = OptionalSubminor.has_value() ? OptionalSubminor.value() : 0;
+  unsigned Build = OptionalBuild.has_value() ? OptionalBuild.value() : 0;
+
   switch (getOS()) {
   default: llvm_unreachable("unexpected OS for Darwin triple");
   case Darwin:
+
+    // Default to darwin19, i.e., iOS 13.0.
+    if (Major == 0)
+      Major = 19;
+
+    Subminor = 0;
+    // Both iOS 7 and 8 using darwin14, set iOS 8.0 as default.
+    if (Major == 14) {
+      Minor = 0;
+      Major = 8;
+    } else {
+      // iOS 9.0
+      if (Major == 15) {
+        Minor = (Minor >= 4) ? 3 : 0;
+      // iOS 10.0
+      } else if (Major == 16) {
+        Minor = (Minor > 0) + (Minor > 1) + (Minor > 3);
+      // iOS 11.0
+      } else if (Major == 17) {
+        Minor = (Minor > 0) + (Minor > 2) + (Minor > 4) + (Minor > 5);
+      // iOS 12.0
+      } else if (Major == 18) {
+        // Treat iOS 12.5 as 12.4
+        Minor = (Minor > 0) + (Minor > 2) + (Minor > 5) + (Minor > 6);
+      // iOS 13.0
+      } else if (Major == 19) {
+        // Treat iOS 13.7 as 13.6
+        Minor = (2 * (Minor > 0)) + (Minor > 2) + (Minor > 3) + (Minor > 4) + (Minor > 5);
+      // iOS 14.0
+      } else if (Major == 20) {
+        Minor = (Minor > 0) + Minor;
+      // iOS 15.0
+      } else if (Major >= 21) {
+        // Treat iOS 15.8, 15.7 as 15.6
+        Minor = (Minor > 5) ? Minor : 6;
+      // iOS 16.0
+      } else if (Major >= 22) {
+        // Treat iOS 16.7 as iOS 16.6
+        Minor = (Minor > 5) ? Minor : 6;
+      // iOS 17.0
+      } else if (Major >= 23) {
+        // Not sure about iOS 17 yet
+      }
+    }
+    return VersionTuple(Major, Minor, Subminor, Build);
   case MacOSX:
     // Ignore the version from the triple.  This is only handled because the
     // the clang driver combines OS X and IOS support into a common Darwin
@@ -1262,6 +1318,10 @@
     // OS X.
     return VersionTuple(5);
   case IOS:
+    // Default to 10.0 (or 13.0 for arm64)
+    if (Major == 0)
+      Major = (getArch() == aarch64) ? 13 : 10;
+    return VersionTuple(Major, Minor, Subminor, Build);
   case TvOS: {
     VersionTuple Version = getOSVersion();
     // Default to 5.0 (or 7.0 for arm64).
